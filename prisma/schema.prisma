// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kids
  unisex
}

model User {
  id String @id @default(uuid())
  firstName String
  lastName String
  email String @unique
  emailVerified DateTime?
  password String
  image String?
  role Role @default(user)
  address Address[]
  orders Order[]
}

model Category {
  id String @id @default(uuid())
  name String @unique
  product Product[]
}

model Country {
  id String @id @default(uuid())
  name String @unique
  code String
  address Address[]
  orderAddress OrderAddress[]
}

model Product {
  id String @id @default(uuid())
  title String
  description String
  inStock Int @default(0)
  price Float @default(0)
  sizes Size[] @default([])
  slug String @unique
  tags String[] @default([])
  gender Gender
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categoryId String
  images ProductImage[]
  category Category @relation(fields: [categoryId], references: [id])
  items OrderItem[]
  @@index([gender])
}

model Address {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  postalCode String
  city String
  phone String
  userId String
  countryId String
  country Country @relation(fields: [countryId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model ProductImage {
  id String @id @default(uuid())
  url String
  productId String
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id String @id @default(uuid())
  subtotal Float
  tax Float
  delivery Float
  total Float
  itemsInOrder Int
  isPaid Boolean
  paidAt DateTime?
  transactionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id])
  items OrderItem[]
  orderAddress OrderAddress?
}

model OrderItem {
  id String @id @default(uuid())
  size Size
  price Float
  quantity Int
  orderId String
  productId String
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model OrderAddress {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  city String
  phone String
  postalCode String
  countryId String
  orderId String @unique
  country Country @relation(fields: [countryId], references: [id])
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}